// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package interfaces

import (
	"sync"
)

// Ensure, that ConfigMock does implement Config.
// If this is not the case, regenerate this file with moq.
var _ Config = &ConfigMock{}

// ConfigMock is a mock implementation of Config.
//
//	func TestSomethingThatUsesConfig(t *testing.T) {
//
//		// make and configure a mocked Config
//		mockedConfig := &ConfigMock{
//			ListRulesByPathFunc: func(listRulesByPathRequest *ListRulesByPathRequest) (*ListRulesByPathResponse, error) {
//				panic("mock out the ListRulesByPath method")
//			},
//		}
//
//		// use mockedConfig in code that requires Config
//		// and then make assertions.
//
//	}
type ConfigMock struct {
	// ListRulesByPathFunc mocks the ListRulesByPath method.
	ListRulesByPathFunc func(listRulesByPathRequest *ListRulesByPathRequest) (*ListRulesByPathResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// ListRulesByPath holds details about calls to the ListRulesByPath method.
		ListRulesByPath []struct {
			// ListRulesByPathRequest is the listRulesByPathRequest argument value.
			ListRulesByPathRequest *ListRulesByPathRequest
		}
	}
	lockListRulesByPath sync.RWMutex
}

// ListRulesByPath calls ListRulesByPathFunc.
func (mock *ConfigMock) ListRulesByPath(listRulesByPathRequest *ListRulesByPathRequest) (*ListRulesByPathResponse, error) {
	if mock.ListRulesByPathFunc == nil {
		panic("ConfigMock.ListRulesByPathFunc: method is nil but Config.ListRulesByPath was just called")
	}
	callInfo := struct {
		ListRulesByPathRequest *ListRulesByPathRequest
	}{
		ListRulesByPathRequest: listRulesByPathRequest,
	}
	mock.lockListRulesByPath.Lock()
	mock.calls.ListRulesByPath = append(mock.calls.ListRulesByPath, callInfo)
	mock.lockListRulesByPath.Unlock()
	return mock.ListRulesByPathFunc(listRulesByPathRequest)
}

// ListRulesByPathCalls gets all the calls that were made to ListRulesByPath.
// Check the length with:
//
//	len(mockedConfig.ListRulesByPathCalls())
func (mock *ConfigMock) ListRulesByPathCalls() []struct {
	ListRulesByPathRequest *ListRulesByPathRequest
} {
	var calls []struct {
		ListRulesByPathRequest *ListRulesByPathRequest
	}
	mock.lockListRulesByPath.RLock()
	calls = mock.calls.ListRulesByPath
	mock.lockListRulesByPath.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

// Ensure, that AntiAffinityRuleRepositoryMock does implement AntiAffinityRuleRepository.
// If this is not the case, regenerate this file with moq.
var _ AntiAffinityRuleRepository = &AntiAffinityRuleRepositoryMock{}

// AntiAffinityRuleRepositoryMock is a mock implementation of AntiAffinityRuleRepository.
//
//	func TestSomethingThatUsesAntiAffinityRuleRepository(t *testing.T) {
//
//		// make and configure a mocked AntiAffinityRuleRepository
//		mockedAntiAffinityRuleRepository := &AntiAffinityRuleRepositoryMock{
//			ListByPathFunc: func(path Path) ([]AntiAffinityRule, error) {
//				panic("mock out the ListByPath method")
//			},
//		}
//
//		// use mockedAntiAffinityRuleRepository in code that requires AntiAffinityRuleRepository
//		// and then make assertions.
//
//	}
type AntiAffinityRuleRepositoryMock struct {
	// ListByPathFunc mocks the ListByPath method.
	ListByPathFunc func(path Path) ([]AntiAffinityRule, error)

	// calls tracks calls to the methods.
	calls struct {
		// ListByPath holds details about calls to the ListByPath method.
		ListByPath []struct {
			// Path is the path argument value.
			Path Path
		}
	}
	lockListByPath sync.RWMutex
}

// ListByPath calls ListByPathFunc.
func (mock *AntiAffinityRuleRepositoryMock) ListByPath(path Path) ([]AntiAffinityRule, error) {
	if mock.ListByPathFunc == nil {
		panic("AntiAffinityRuleRepositoryMock.ListByPathFunc: method is nil but AntiAffinityRuleRepository.ListByPath was just called")
	}
	callInfo := struct {
		Path Path
	}{
		Path: path,
	}
	mock.lockListByPath.Lock()
	mock.calls.ListByPath = append(mock.calls.ListByPath, callInfo)
	mock.lockListByPath.Unlock()
	return mock.ListByPathFunc(path)
}

// ListByPathCalls gets all the calls that were made to ListByPath.
// Check the length with:
//
//	len(mockedAntiAffinityRuleRepository.ListByPathCalls())
func (mock *AntiAffinityRuleRepositoryMock) ListByPathCalls() []struct {
	Path Path
} {
	var calls []struct {
		Path Path
	}
	mock.lockListByPath.RLock()
	calls = mock.calls.ListByPath
	mock.lockListByPath.RUnlock()
	return calls
}
